
BinaryClock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000116  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000048  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000145  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000153  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000acd  00000000  00000000  00000183  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000745  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d4  00000000  00000000  00001395  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  0000166c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000022f  00000000  00000000  000016c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000205  00000000  00000000  000018f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000002  00000098  00000098  0000010c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b18  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.setLEDs 00000018  00000072  00000072  000000e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000002a  00000048  00000048  000000bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_fini 00000002  0000009a  0000009a  0000010e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_funcs_on_exit 00000002  0000009c  0000009c  00000110  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_simulator_exit 00000002  0000009e  0000009e  00000112  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.exit    0000000e  0000008a  0000008a  000000fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text._Exit   00000002  000000a0  000000a0  00000114  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	4a c0       	rjmp	.+148    	; 0x98 <__bad_interrupt>
   4:	49 c0       	rjmp	.+146    	; 0x98 <__bad_interrupt>
   6:	48 c0       	rjmp	.+144    	; 0x98 <__bad_interrupt>
   8:	47 c0       	rjmp	.+142    	; 0x98 <__bad_interrupt>
   a:	46 c0       	rjmp	.+140    	; 0x98 <__bad_interrupt>
   c:	45 c0       	rjmp	.+138    	; 0x98 <__bad_interrupt>
   e:	44 c0       	rjmp	.+136    	; 0x98 <__bad_interrupt>
  10:	43 c0       	rjmp	.+134    	; 0x98 <__bad_interrupt>
  12:	42 c0       	rjmp	.+132    	; 0x98 <__bad_interrupt>
  14:	41 c0       	rjmp	.+130    	; 0x98 <__bad_interrupt>
  16:	40 c0       	rjmp	.+128    	; 0x98 <__bad_interrupt>
  18:	3f c0       	rjmp	.+126    	; 0x98 <__bad_interrupt>
  1a:	3e c0       	rjmp	.+124    	; 0x98 <__bad_interrupt>
  1c:	3d c0       	rjmp	.+122    	; 0x98 <__bad_interrupt>
  1e:	3c c0       	rjmp	.+120    	; 0x98 <__bad_interrupt>
  20:	3b c0       	rjmp	.+118    	; 0x98 <__bad_interrupt>
  22:	3a c0       	rjmp	.+116    	; 0x98 <__bad_interrupt>
  24:	39 c0       	rjmp	.+114    	; 0x98 <__bad_interrupt>
  26:	38 c0       	rjmp	.+112    	; 0x98 <__bad_interrupt>
  28:	37 c0       	rjmp	.+110    	; 0x98 <__bad_interrupt>
  2a:	36 c0       	rjmp	.+108    	; 0x98 <__bad_interrupt>
  2c:	35 c0       	rjmp	.+106    	; 0x98 <__bad_interrupt>
  2e:	34 c0       	rjmp	.+104    	; 0x98 <__bad_interrupt>
  30:	33 c0       	rjmp	.+102    	; 0x98 <__bad_interrupt>
  32:	32 c0       	rjmp	.+100    	; 0x98 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61
  40:	03 d0       	rcall	.+6      	; 0x48 <_etext>
  42:	23 c0       	rjmp	.+70     	; 0x8a <exit>

00000044 <_exit>:
  44:	f8 94       	cli

00000046 <__stop_program>:
  46:	ff cf       	rjmp	.-2      	; 0x46 <__stop_program>

Disassembly of section .text:

00000098 <__bad_interrupt>:
  98:	b3 cf       	rjmp	.-154    	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.setLEDs:

00000072 <setLEDs>:
	}
}

void setLEDs(uint8_t i)
{
	PORTC = i;
  72:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	8e e1       	ldi	r24, 0x1E	; 30
  76:	8a 95       	dec	r24
  78:	f1 f7       	brne	.-4      	; 0x76 <setLEDs+0x4>
	_delay_us(90);
	PORTC = 0b00000000;
  7a:	18 b8       	out	0x08, r1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	81 ee       	ldi	r24, 0xE1	; 225
  7e:	94 e0       	ldi	r25, 0x04	; 4
  80:	01 97       	sbiw	r24, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <setLEDs+0xe>
  84:	00 c0       	rjmp	.+0      	; 0x86 <setLEDs+0x14>
  86:	00 00       	nop
  88:	08 95       	ret

Disassembly of section .text.main:

00000048 <main>:
{
	//Set AS2 to 1 so TSK1 and TASK2 (external quartz clock)
	//ASSR |= 0b00100000;
	
	// Setze alle Pins von Port C als Ausgänge
	DDRC = 0xFF;
  48:	8f ef       	ldi	r24, 0xFF	; 255
  4a:	87 b9       	out	0x07, r24	; 7
	
	// Aktiviere Pull-Up-Widerstände für die Taster
	PORTD |= (1 << PD0) | (1 << PD1) | (1 << PD2); 
  4c:	8b b1       	in	r24, 0x0b	; 11
  4e:	87 60       	ori	r24, 0x07	; 7
  50:	8b b9       	out	0x0b, r24	; 11

	uint8_t counter = 0;
  52:	c0 e0       	ldi	r28, 0x00	; 0
	while (1)
	{
		if ((PIND & (1 << PIND2))) // Überprüfe den Zustand des Tasters an PD1
  54:	4a 9b       	sbis	0x09, 2	; 9
  56:	0a c0       	rjmp	.+20     	; 0x6c <main+0x24>
  58:	8f e4       	ldi	r24, 0x4F	; 79
  5a:	93 ec       	ldi	r25, 0xC3	; 195
  5c:	01 97       	sbiw	r24, 0x01	; 1
  5e:	f1 f7       	brne	.-4      	; 0x5c <main+0x14>
  60:	00 c0       	rjmp	.+0      	; 0x62 <main+0x1a>
  62:	00 00       	nop
		{
			_delay_ms(200);
			counter++;
  64:	cf 5f       	subi	r28, 0xFF	; 255
			if (counter == 64)
  66:	c0 34       	cpi	r28, 0x40	; 64
  68:	09 f4       	brne	.+2      	; 0x6c <main+0x24>
			{
				counter = 0;
  6a:	c0 e0       	ldi	r28, 0x00	; 0
			}

		}

		//setLEDs(0b00111111);
		setLEDs(counter);
  6c:	8c 2f       	mov	r24, r28
  6e:	01 d0       	rcall	.+2      	; 0x72 <setLEDs>
		
	}
  70:	f1 cf       	rjmp	.-30     	; 0x54 <main+0xc>

Disassembly of section .text.__dummy_fini:

0000009a <_fini>:
  9a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000009c <__funcs_on_exit>:
  9c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000009e <__simulator_exit>:
  9e:	08 95       	ret

Disassembly of section .text.exit:

0000008a <exit>:
  8a:	ec 01       	movw	r28, r24
  8c:	07 d0       	rcall	.+14     	; 0x9c <__funcs_on_exit>
  8e:	05 d0       	rcall	.+10     	; 0x9a <_fini>
  90:	ce 01       	movw	r24, r28
  92:	05 d0       	rcall	.+10     	; 0x9e <__simulator_exit>
  94:	ce 01       	movw	r24, r28
  96:	04 d0       	rcall	.+8      	; 0xa0 <_Exit>

Disassembly of section .text._Exit:

000000a0 <_Exit>:
  a0:	d1 df       	rcall	.-94     	; 0x44 <_exit>
